#+title: Emacs configuration
#+author: Lorenzo Colombo


* General section 

** Packages and repositories setup

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+end_src

** Generic settings

*** Defaults

#+begin_src emacs-lisp
(auto-save-mode -1)
(electric-pair-mode 1)
(global-display-line-numbers-mode 1)

(setq display-line-numbers-type 'relative)
(setq inhibit-startup-screen 't)
(setq-default word-wrap t)
(setq-default tab-width 4)
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq ring-bell-function 'ignore)

(put 'donwcase-region 'disabled nil)

(set-frame-font "Iosevka Nerd Font Propo 20" nil t)
#+end_src

*** Dired

#+begin_src emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)

(add-hook 'dired-mode-hook
		  (lambda () (local-set-key (kbd "RET") #'dired-find-alternate-file)))
#+end_src

*** Window & window movements

These bindings are chosen in order to avoid potential conflicts with other modes or packages that require ~S-<arrows>~ to do stuff.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c <right>") #'windmove-right)
(global-set-key (kbd "C-c <left>") #'windmove-left)
(global-set-key (kbd "C-c <up>") #'windmove-up)
(global-set-key (kbd "C-c <down>") #'windmove-down)
#+end_src

*** Set meta key to CMD on MacOs

#+begin_src emacs-lisp
(setq mac-option-modifier nil
      mac-command-modifier 'meta
      x-select-enable-clipboard t)
#+end_src

*** Colorschemes

The following block is to ensure that the themes usually set as default are installed before being loaded. This step is necessary only for the themes that may be set as default theme on startup to avoid errors.

#+begin_src emacs-lisp
(use-package naga-theme
  :ensure t)
(use-package gruber-darker-theme
  :ensure t)
(use-package kaolin-themes
  :ensure t)
(use-package zenburn-theme
  :ensure t)
#+end_src

Then a theme can be set as default:

#+begin_src emacs-lisp
(load-theme 'naga)
#+end_src

* Packages and Modes

** Helpful

The ~helpful~ package provides a nicer interface for the standard help buffers. To do this more conveniently, it needs to override the standard help keybindings.

#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :bind (("C-h f" . helpful-callable)
		 ("C-h v" . helpful-variable)
		 ("C-h k" . helpful-key)
		 ("C-h x" . helpful-command)
		 ("C-c C-d" . helpful-at-point)))
#+end_src

** GIT interaction

First of all, we need to ensure ~magit~ as our Git client on Emacs;

#+begin_src emacs-lisp
(use-package magit
  :ensure t)
#+end_src

Then, we install the ~git-gutter~ for seamless Git interaction and enable it globally;

#+begin_src emacs-lisp
(use-package git-gutter
  :ensure t
  :config (global-git-gutter-mode 1))
#+end_src

Finally, we set the folowing key-bindings:

#+begin_src emacs-lisp 
(global-set-key (kbd "C-c p") 'git-gutter:previous-hunk)
(global-set-key (kbd "C-c n") 'git-gutter:next-hunk)
(global-set-key (kbd "C-c v s") 'git-gutter:stage-hunk)
(global-set-key (kbd "C-c v r") 'git-gutter:revert-hunk)
#+end_src

** Expand-Region

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :init (pending-delete-mode t)
  :config (require 'expand-region)
  :bind ("C-ù" . er/expand-region))
;; (require 'expand-region)
;; (global-set-key (kbd "C-ù") 'er/expand-region)
#+end_src

With ~pending-delete-mode~ enabled, highligted text can be rapidly changed.

** Ace-Jump

#+begin_src emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :bind (("C-c SPC" . ace-jump-mode)
		 ("C-x SPC" . ace-jump-mode-pop-mark)))
#+end_src

** Pdf-Tools
This package is important as it is used with ~AUCTeX~ as pdf viewer.

The list of incompatible modes is set to empty beacuse of conflicts that may arise, especially with line numbers mode.

#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :init (setq pdf-view-incompatible-modes '())
  :config (pdf-tools-install))
#+end_src

** LaTeX

The basic package for working with LaTeX on Emacs is the ~AUCTeX~ package.

#+begin_src emacs-lisp
(use-package auctex
  :ensure t
  :init (require 'latex)
  (setq TeX-parse-self t
		TeX-view-program-selection '((output-pdf "PDF Tools"))
		TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
		TeX-source-correlate-start-server t
		Tex-source-correlate-method '((pdf . synctex)))
  (TeX-source-correlate-mode)
  (define-key TeX-source-correlate-map [C-down-mouse-1] #'TeX-view-mouse)
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))
#+end_src

Reftex provides nice automplete features to LaTeX, especially for bibliography and indexes.

#+begin_src emacs-lisp
(require 'reftex)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
#+end_src

** IDO & Vertico

We only need to install ~vertico~ and ~ido-vertical-mode~, as ~ido~ is a built-in package.

#+begin_src emacs-lisp
(use-package ido-vertical-mode
  :ensure t
  :init
  (require 'ido-vertical-mode)
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
  :config
  (ido-mode 1)
  (ido-vertical-mode 1))
#+end_src

Installation and configuration of ~vertico~.

#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :config
  (vertico-mode 1))
#+end_src

** Org-mode and related

*** Org-Mode itslef

~org-mode~ is built-in, so it needs only to be configured.

#+begin_src emacs-lisp
(use-package org
  :ensure t
  :init
  (setq org-hide-emphasis-markers t
		org-startup-folded 'content
		org-startup-truncated nil
		org-directory "~/.notes"
		org-edit-src-content-indentation 0
		org-src-tab-acts-natively t
		org-src-preserve-indentation t)
  :hook (org-mode . org-indent-mode))
#+end_src

*** Bullets
~org-bullets~ needs to be installed and attached via hook to ~org-mode~.

#+begin_src emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode))
#+end_src

*** Org-agenda & Org-capture

Keybindings for rapid access:

#+begin_src emacs-lisp
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
#+end_src

**** Org-agenda:

#+begin_src emacs-lisp
(setq org-agenda-files '("~/.notes/agenda.org"))
(setq org-agenda-span 'month)
#+end_src

**** Org-capture:

#+begin_src emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
#+end_src

** Company-mode

This takes care of installing and enabling ~company-mode~ globally.

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :init
  (setq company-minimum-prefix-length 1
		company-selection-wrap-around t
		company-tooltip-align-annotations t
		company-tooltip-annotation-padding 2
		company-tooltip-limit 9
		company-show-quick-access 'left)
   :config
  (global-company-mode))
#+end_src

~eglot~ might cause interference with ~company-mode~, especially with ~company-yasnippet~: this hook solves the conflict:

#+begin_src emacs-lisp
(defun add-company-yasnippet ()
	(setq company-backends '((company-capf :with company-yasnippet))))
(add-hook 'eglot--managed-mode-hook #'add-company-yasnippet)
#+end_src

** Eglot

Installation should not be needed, as Eglot is usually built-in. But, to be extra sure:

#+begin_src emacs-lisp
(unless (package-installed-p 'eglot)
  (package-install 'eglot))
#+end_src

Then, we disable annoying Eldoc messages by default:

#+begin_src emacs-lisp
(setq eglot-managed-mode-hook (list (lambda () (eldoc-mode -1))))
#+end_src

Finally, we add some language-specific hooks:

#+begin_src emacs-lisp
(add-hook 'c-mode-hook 'eglot-ensure)
(add-hook 'c++-mode-hook 'eglot-ensure)
(add-hook 'python-mode-hook 'eglot-ensure)
(add-hook 'php-mode-hook 'eglot-ensure)
(add-hook 'js-mode-hook 'eglot-ensure)

(when (eq system-type 'darwin)
  (with-eval-after-load "eglot"
    (add-to-list 'eglot-server-programs '(js-mode "~/.nvm/versions/node/v18.16.1/bin/typescript-language-server" "--stdio"))))
(when (eq system-type 'gnu/linux)
  (with-eval-after-load "eglot"
    (add-to-list 'eglot-server-programs '(js-mode "/usr/local/bin/typescript-language-server" "--stdio"))))
  
(when (eq system-type 'darwin)
  (with-eval-after-load "eglot"
    (add-to-list 'eglot-server-programs '(php-mode "~/.nvm/versions/node/v18.16.1/bin/intelephense" "--stdio"))))
(when (eq system-type 'gnu/linux)
  (with-eval-after-load "eglot"
    (add-to-list 'eglot-server-programs '(php-mode "/usr/local/bin/intelephense" "--stdio"))))
#+end_src

Bonus: this snippet enables format-on-save using LSP:

#+begin_src emacs-lisp
(add-hook 'before-save-hook 'eglot-format)
#+end_src

** Yasnippet

We need to install both ~yasnippet~ and a snippets' collection:

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :bind ("C-c y" . company-yasnippet)
  :config
  (yas-global-mode 1))
(use-package yasnippet-snippets
  :ensure t)
#+end_src

** Dashboard

We first need to install the ~dashboard~ package and the ~all-the-icons~ package to add the icons. Remember that ~all-the-icons~ needs to initialize with the comand ~M-x all-the-icons-install-fonts RET~.

#+begin_src emacs-lisp
(unless (package-installed-p 'dashboard)
  (package-install 'dashboard))
(unless (package-installed-p 'all-the-icons)
  (package-install 'all-the-icons))
#+end_src

#+begin_src emacs-lisp
(require 'dashboard)
(dashboard-setup-startup-hook)

(setq dashboard-items '((bookmarks . 7)
						(recents . 7)
						(projects . 7)))

(setq dashboard-icon-type 'all-the-icons)
(setq dashboard-set-heading-icons nil)
(setq dashboard-set-file-icons t)
#+end_src

** Projectile

#+begin_src emacs-lisp
(unless (package-installed-p 'projectile)
  (package-install 'projectile))

(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

** Move-text

Installation and configuration to use default key-bindings:

#+begin_src emacs-lisp
(unless (package-installed-p 'move-text)
  (package-install 'move-text))

(move-text-default-bindings)
#+end_src

And this is a function to auto indent when moving a line:

#+begin_src emacs-lisp
(defun indent-region-advice (&rest ignored)
  (let ((deactivate deactivate-mark))
    (if (region-active-p)
      (indent-region (region-beginning) (region-end))
      (indent-region (line-beginning-position) (line-end-position)))
    (setq deactivate-mark deactivate)))
(advice-add 'move-text-up :after 'indent-region-advice)
(advice-add 'move-text-down :after 'indent-region-advice)
#+end_src

** Mode line (~doom-modeline~)

Install ~doom-modeline~ package and the ~nerd-icons~ package; in order for this to run properly, it is required to run the command ~M-x nerd-icons-install-fonts RET~.

#+begin_src emacs-lisp
(unless (package-installed-p 'doom-modeline)
  (package-install 'doom-modeline))
(unless (package-installed-p 'nerd-icons)
  (package-install 'nerd-icons))
#+end_src

Enabling the ~doom-modeline~:

#+begin_src emacs-lisp
(require 'doom-modeline)
(doom-modeline-mode 1)
#+end_src

** Tree file explorer (neotree)

Install the ~neotree~ package and the ~all-the-icons~ package:

#+begin_src emacs-lisp
(unless (package-installed-p 'neotree)
  (package-install 'neotree))
(unless (package-installed-p 'all-the-icons)
  (package-install 'all-the-icons))
#+end_src

Then we add configuration and keybinding to toggle the explorer:

#+begin_src emacs-lisp
(require 'neotree)
(global-set-key (kbd "C-c e") 'neotree-toggle)
(setq neo-smart-open t)
(when (display-graphic-p) (require 'all-the-icons))
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+end_src

** Wrap-region

#+begin_src emacs-lisp
(unless (package-installed-p 'wrap-region)
  (package-install 'wrap-region))
#+end_src

This sets ~wrap-region~ globally, with the exception of ~dired-mode~:

#+begin_src emacs-lisp
(require 'wrap-region)
(wrap-region-mode t)
(add-to-list 'wrap-region-except-modes 'dired-mode)
#+end_src

** Aggressive indent

#+begin_src emacs-lisp
(unless (package-installed-p 'aggressive-indent)
  (package-install 'aggressive-indent))

(global-aggressive-indent-mode 1)
#+end_src
	
* Language specific modes 

** Markdown

#+begin_src emacs-lisp
(unless (package-installed-p 'markdown-mode)
  (package-install 'markdown-mode))
#+end_src

** Web-Mode

#+begin_src emacs-lisp
(unless (package-installed-p 'web-mode)
  (package-install 'web-mode))

(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

(setq web-mode-markup-indent-offset 4)
(setq web-mode-css-indent-offset 4)
(setq web-mode-code-indent-offset 4)
#+end_src

** PHP

#+begin_src emacs-lisp
(unless (package-installed-p 'php-mode)
  (package-install 'php-mode))
#+end_src

** CSV
** Emmet-mode

#+begin_src emacs-lisp
(unless (package-installed-p 'emmet-mode)
  (package-install 'emmet-mode))

(add-hook 'sgml-mode-hook 'emmet-mode)
#+end_src

** JavaScript

#+begin_src emacs-lisp
(unless (package-installed-p 'js2-mode)
  (package-install 'js2-mode))

(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-hook 'js-mode-hook 'js2-minor-mode)
#+end_src
